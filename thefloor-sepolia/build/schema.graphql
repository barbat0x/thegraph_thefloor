type Deposit @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  Vault_id: BigInt! # uint256
  amounts: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DepositBatch @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  ids: [BigInt!]! # uint256[]
  amounts: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Swap @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  fromId: BigInt! # uint256
  toId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenCreated @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  Vault_id: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  Vault_id: BigInt! # uint256
  amounts: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawBatch @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  ids: [BigInt!]! # uint256[]
  amounts: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VaultCreated @entity(immutable: true) {
  id: ID!
  vault: Bytes! # address
  collection: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nfts: [VaultNFT!] @derivedFrom(field: "vault")
  erc20Tokens: [VaultERC20!] @derivedFrom(field: "vault")
}

type VaultNFT @entity {
  id: ID!
  vault: VaultCreated!
  tokenId: BigInt!
  amount: BigInt!
}

type VaultERC20 @entity(immutable: true) {
  id: ID!
  vault: VaultCreated!
  VaultId: BigInt!
  erc20: Bytes!
}
