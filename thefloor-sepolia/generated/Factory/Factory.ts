// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class VaultCreated extends ethereum.Event {
  get params(): VaultCreated__Params {
    return new VaultCreated__Params(this);
  }
}

export class VaultCreated__Params {
  _event: VaultCreated;

  constructor(event: VaultCreated) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collection(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Factory__getVaultsResult {
  value0: Array<Address>;
  value1: BigInt;

  constructor(value0: Array<Address>, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPairs(): Array<Address> {
    return this.value0;
  }

  getNewIndex(): BigInt {
    return this.value1;
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  allVaults(param0: BigInt): Address {
    let result = super.call("allVaults", "allVaults(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_allVaults(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allVaults", "allVaults(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allVaultsLength(): BigInt {
    let result = super.call(
      "allVaultsLength",
      "allVaultsLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_allVaultsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allVaultsLength",
      "allVaultsLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getERC20Address(_collection: Address): Address {
    let result = super.call(
      "getERC20Address",
      "getERC20Address(address):(address)",
      [ethereum.Value.fromAddress(_collection)],
    );

    return result[0].toAddress();
  }

  try_getERC20Address(_collection: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getERC20Address",
      "getERC20Address(address):(address)",
      [ethereum.Value.fromAddress(_collection)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getERC20Address1155(_collection: Address, _tokenId: BigInt): Address {
    let result = super.call(
      "getERC20Address1155",
      "getERC20Address1155(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_collection),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );

    return result[0].toAddress();
  }

  try_getERC20Address1155(
    _collection: Address,
    _tokenId: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getERC20Address1155",
      "getERC20Address1155(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_collection),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVaultDeterministicAddress(_collection: Address): Address {
    let result = super.call(
      "getVaultDeterministicAddress",
      "getVaultDeterministicAddress(address):(address)",
      [ethereum.Value.fromAddress(_collection)],
    );

    return result[0].toAddress();
  }

  try_getVaultDeterministicAddress(
    _collection: Address,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVaultDeterministicAddress",
      "getVaultDeterministicAddress(address):(address)",
      [ethereum.Value.fromAddress(_collection)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVaults(startIndex: BigInt, numOfVaults: BigInt): Factory__getVaultsResult {
    let result = super.call(
      "getVaults",
      "getVaults(uint256,uint256):(address[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(numOfVaults),
      ],
    );

    return new Factory__getVaultsResult(
      result[0].toAddressArray(),
      result[1].toBigInt(),
    );
  }

  try_getVaults(
    startIndex: BigInt,
    numOfVaults: BigInt,
  ): ethereum.CallResult<Factory__getVaultsResult> {
    let result = super.tryCall(
      "getVaults",
      "getVaults(uint256,uint256):(address[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(numOfVaults),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Factory__getVaultsResult(
        value[0].toAddressArray(),
        value[1].toBigInt(),
      ),
    );
  }

  safe(): Address {
    let result = super.call("safe", "safe():(address)", []);

    return result[0].toAddress();
  }

  try_safe(): ethereum.CallResult<Address> {
    let result = super.tryCall("safe", "safe():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultAddresses(param0: Address): Address {
    let result = super.call(
      "vaultAddresses",
      "vaultAddresses(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toAddress();
  }

  try_vaultAddresses(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vaultAddresses",
      "vaultAddresses(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultImplementation(): Address {
    let result = super.call(
      "vaultImplementation",
      "vaultImplementation():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_vaultImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vaultImplementation",
      "vaultImplementation():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _vaultImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateVaultCall extends ethereum.Call {
  get inputs(): CreateVaultCall__Inputs {
    return new CreateVaultCall__Inputs(this);
  }

  get outputs(): CreateVaultCall__Outputs {
    return new CreateVaultCall__Outputs(this);
  }
}

export class CreateVaultCall__Inputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }

  get _collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateVaultCall__Outputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }
}

export class CreateVaultToCall extends ethereum.Call {
  get inputs(): CreateVaultToCall__Inputs {
    return new CreateVaultToCall__Inputs(this);
  }

  get outputs(): CreateVaultToCall__Outputs {
    return new CreateVaultToCall__Outputs(this);
  }
}

export class CreateVaultToCall__Inputs {
  _call: CreateVaultToCall;

  constructor(call: CreateVaultToCall) {
    this._call = call;
  }

  get _collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CreateVaultToCall__Outputs {
  _call: CreateVaultToCall;

  constructor(call: CreateVaultToCall) {
    this._call = call;
  }
}
